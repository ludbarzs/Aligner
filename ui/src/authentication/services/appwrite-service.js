import { Client, Account } from '../../../node_modules/appwrite/dist/esm/sdk.js';

// Initialize Appwrite Client
const client = new Client()
    .setEndpoint('https://fra.cloud.appwrite.io/v1')
    .setProject('68318dce002126d5e349'); 

const account = new Account(client);

export const appwriteService = {
    // Create a new user account
    async createAccount(email, password, name) {
        try {
            const response = await account.create(
                'unique()', // Unique ID will be generated by Appwrite
                email,
                password,
                name
            );
            return response;
        } catch (error) {
            throw new Error(error.message);
        }
    },

    // Login user
    async login(email, password) {
        try {
            return await account.createEmailPasswordSession(email, password);
        } catch (error) {
            throw new Error(error.message);
        }
    },

    // Logout user
    async logout() {
        try {
            return await account.deleteSession('current');
        } catch (error) {
            throw new Error(error.message);
        }
    },

    // Get current user - improved error handling
    async getCurrentUser() {
        try {
            return await account.get();
        } catch (error) {
            // Check if it's an authentication error (401)
            if (error.code === 401 || error.type === 'general_unauthorized_scope') {
                console.log('User not authenticated');
                return null;
            }
            // For other errors, log and return null
            console.error('Error getting current user:', error);
            return null;
        }
    },

    // Check if user is logged in - improved version
    async isLoggedIn() {
        try {
            const user = await this.getCurrentUser();
            return user !== null;
        } catch (error) {
            console.error('Error checking login status:', error);
            return false;
        }
    },

    // Check authentication status without making API call
    async checkAuthStatus() {
        try {
            // Try to get the current session
            const session = await account.getSession('current');
            return !!session;
        } catch (error) {
            return false;
        }
    },

    // Initialize and check if user is already logged in
    async initialize() {
        try {
            const user = await this.getCurrentUser();
            return user;
        } catch (error) {
            console.log('No active session found');
            return null;
        }
    }
};